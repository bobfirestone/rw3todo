This is the rails app for rubyweekend 3

September 8 & 9, 2012

http://www.rubyweekend.com

OVERVIEW
1. Create a new rails app
2. Create basic todos
3. Apply Twitter Bootstrap
4. Create User Accounts
5. Restrict Access to loggedin users
6. Attach todos to specific users
7. Deploy app to heroku
8. Add about page
9. Add description to todos
10. Add notes to todos
11. Add priority to todos
12. Add status to todos
13. Modify top navigation
14. Deploy complete app to heroku

1.1 CREATE NEW RAILS APP
  $ rails new rw3todo

1.2 MOVE INTO APP DIRECTORY
  $ cd rw3todo

1.3 RUN THE SERVER
  $ rails server
  go to http://localhost:3000
  You should see the "Welcome aboard page"

  KILL SERVER
  ctrl + c

2.0 CREATE BASIC TODOS
2.1 SCAFFOLD TODO
  $ rails g scaffold todo title
2.2 MIGRATE THE DATABASE
  $ bundle exec rake db:migrate
2.2 START THE SERVER
  $ rails s

2.3 VIEW TODOS INDEX PAGE
  go to localhost:3000/todos

2.4 CREATE A TODO
  If successful you should be on the show page for the todo

2.5 CREATE A TODO WITH NOTHING IN IT
  not very helpful. add a validation to require there be something in the title.

2.6 ADD VALIDATION FOR TITLE
  app/models/todo.rb
    validates_presence_of :title

  TRY TO CREATE A TODO WITH NOTHING IN IT -- Should error.

3.0 APPLY TWITTER BOOTSTRAP. THE APP IS UGLY - TIME FOR THE PRETTY(ish)
3.1 Install twitter-bootstrap-rails gem
  Gemfile
    group :assets do
      ...
      gem 'twitter-bootstrap-rails', "2.1.3"
      gem 'therubyracer', :platforms => :ruby
      ...
    end

3.2 KILL SERVER

3.3 BUNDLE THE GEMS
  $ bundle install

3.4 INSTALL TWITTER-BOOTSTRAP-RAILS
  $ rails g bootstrap:install
  // this add the bootstrap files to your app

3.5 LAYOUT GENERATORS
  $ rails g bootstrap:layout application fixed
  // this overwrites the master layout. answer y to the conflict message

3.6 BOOTSTRAP OUR TODOS
  $ rails g bootstrap:themed Todos
  // this overwrites the views for our todos

3.7 START THE SERVER

3.8 IT LOOKS A BIT OFF
  remove app/assets/stylesheets/scaffold.css.scss

3.9 Add alerts helper to layout
  app/layouts/application.html.erb (line 63 indide the div above the yield)
    <%= bootstrap_flash %>
3.10 Fix a deploy problem with flash messages when deploying to heroku
    in app/helpers create file bootstrap_flash_helper.rb and copy code from 
    https://github.com/seyhunak/twitter-bootstrap-rails/blob/master/app/helpers/bootstrap_flash_helper.rb
    into the new file

4. CREATEING USER ACCOUNTS
4.1 The Devise Gem
  Gemfile
    gem 'devise'

4.2 INSTALL DEVISE
  $ rails g devise:install

4.3 FOLLOW THE DEVISE INSTRUCTIONS

  ROOT URL
    config/routes.rb (line 53)
      root :to => 'todos#index'

    remove public/index.html

  FLASH MESSAGES // There is a helper in twitter bootstrap that handles this functionality
    app/views/layouts/application.html.erb
      <p class="notice"><%= notice %></p>
      <p class="alert"><%= alert %></p>

4.4 CREATE OUR USERS
  $ rails g devise User

4.5 MIGRATE THE DB
  $ bundle exec rake db:migrate

4.6 ADD SIGN IN AND SIGN UP LINKS
  inside the sidebar area, replace Link1 & Link2. Delete Link3
    app/views/layouts/application.html.erb (line 71)
      <li><%= link_to "Sign Up", new_user_registration_path  %></li>
      <li><%= link_to "Sign In", new_user_session_path  %></li>

4.7 SIGN UP FOR AN ACCOUNT!
    how do you log out?
    
4.8 UPDATE SIDEBAR
  app/views/layouts/application.html.erb
    <% if user_signed_in? %>
      <li><%= link_to "Update Account", edit_registration_path(current_user) %></li>
      <li><%= link_to "Sign Out", destroy_user_session_path, :method => :delete %></li>
    <% else%>
      <li><%= link_to "Sign Up", new_user_registration_path  %></li>
      <li><%= link_to "Sign In", new_user_session_path  %></li>
    <% end %>
4.9 REFRESH PAGE!
    sign out then sign back in.

5.0 RESTRICT ACCESS TO LOGGEDIN USERS
5.1 AUTHENTICATE USERS
    app/controllers/todos_controller.rb
      before_filter :authenticate_user!

6.0 ATTACH TODOS TO SPECIFIC USERS
6.1 Active record relations
  app/models/user.rb
    has_many :todos

  app/models/todo.rb
    belongs_to :user

6.2 Create migration to add user_id to todos table    
  $ rails g migration add_user_id_to_todos user_id:integer
6.3 Migrate changes in DB
  $ bundle exec rake db:migrate
6.4 Modify todos_controller to only show user todos that belong to them
  app/controllers/todos_controller.rb
    replace all `Todo.` with `current_user.todos.`
    NOTE: be sure the . is after the Todo if you "global find and replace". This ensures that the class name, and flash messages are untouched.
6.5 Start server and add a couple of todos to account

7.0 DEPLOY TO HEROKU
7.1 Signup at https://api.heroku.com/signup
7.2 modify gem file for deploy
  Gemfile
    group :development do
      gem 'sqlite3' # <-- move this into here
      gem 'heroku'
    end
    group :production do
      gem 'pg'
      gem 'thin'
    end
  
  $ bundle
  $ git init .
  $ git add .
  $ git commit -m "Initial Commit"
  $ heroku create
     Enter in the credentials you signed up with.
     The url of the app will be given to you after the app has been created.
  $ git push heroku master
  $ heroku run rake db:migrate

7.3 Go to app page. Congratulations you have deployed a rails app.

8.0 Static page(s)
8.1 ADD ABOUT PAGE
  $ rails g controller pages about
8.2 Modify your about page view
  app/views/pages/about.html.erb
    Put what ever you want here
8.3 Add link to about page to top nav menu
  app/views/layout/application.html.erb (about line 52)
    Change
    <li><%= link_to "Link3", "/path3"  %></li>
    To
    <li><%= link_to "About", about_path  %></li>
8.4 Routing for about page
  config/routes.rb
    Change
      get "pages/about"
    To
      match "about" => 'pages#about', as: "about"


9.0 Add description to todos
9.1 Create migration for adding description to todos
  $ rails g migration add_description_to_todos description:text
9.2 Add :description to attr_accessible
  app/models/todo.rb
    attr_accessible :title, :description
9.3 Add description to form
  app/views/todos/_form.html.erb
    <div class="control-group">
      <%= f.label :description, :class => 'control-label' %>
      <div class="controls">
        <%= f.text_area :description, :class => 'text_area' %>
      </div>
    </div>
9.4 Add description to todo show page
  app/views/todos/show.rb
    <dt><strong><%= model_class.human_attribute_name(:description) %>:</strong></dt>
    <dd><%= @todo.description %></dd>

10.0 Add notes to todos
10.1 Create note model
  $ rails g model note content:text todo_id:integer
10.2 Migrate DB changes
  $ bundle exec rake db:migrate
10.3 ACTIVE RECORD ASSOCIATIONS
  model/todo.rb
    has_many :notes

  model/note.rb
    belongs_to :todo
10.4 SHOW TODO NOTES ON TODO PAGE
  views/todos/show.html.erb
    <div>
      <h3>Notes</h3>
      <ul>
        <% @todo.notes.each do |note| %>
          <li><%= note.content %> <em><%= note.created_at %><em></li>
        <% end %>
      </ul>
    </div>
10.5 ADD SOME NOTES IN THE CONSOLE
  $ rails console

  > t = Todo.first
  > n = Note.create(content: "It's a note", todo_id: 1)

  View the page and the note should be there
  > exit
  $ rails s
  http://localhost:3000/todos

  stop the server "ctrl-c"
  $ rails console
  > t = Todo.first
  > x = t.notes.build(content: "note made by build")
  > x.save

  View the page again and the second note will be there
  > exit
  $ rails s
  http://localhost:3000/todos

10.6 CREATE NOTE FROM TODO SHOW PAGE
  1. Create a notes_controller
  2. add routing for the controller
  3. add a notes form on the show page

10.6.1 Create NOTES CONTROLLER
  $ rails g controller notes

  controllers/notes_controller
    def create
      @todo = Todo.find(params[:todo_id])
      @note = @todo.notes.build(params[:note])

      if @note.save
        redirect_to todo_path(@todo)
      else
        redirect_to todo_path(@todo)
      end
    end


10.6.2 ROUTING TO THE CONTROLLER
  config/routes.rb
    resources :todos do
      resources :notes
    end

10.6.3 FORM ON TODO SHOW PAGE
  views/todos/show.html.erb
    <%= form_for([@todo, @todo.notes.build]) do |f| %>
      <%= f.label :content, "Add a Note" %>
      <%= f.text_field :content %>
      
      <%= f.submit %>
    <% end %>

  $ rails s
  http://localhost:3000/todos/1

  reload the page & the form should be there


10.7 VALIDATE PRESENCE OF CONTENT
  app/models/note.rb
    validates_presence_of :content

11.0 Add priority to todos
11.1 Create mogration adding priority to todos
  $ rails g migration add_priority_to_todos priority:integer
11.2 Rake the DB
  $ bundle exec rake db:migrate
11.3 Make priority attr_accessible
  model/todo.rb
    attr_accessible :title, :description, :priority

11.4 Add priority to form
  views/todos/_form.html.erb
    <div class="control-group">
      <%= f.label :priority, :class => 'control-label' %>
      <div class="controls">
        <%= f.text_field :priority, :class => 'text_field' %>
      </div>
    </div>
11.5 Add priority to index
  views/todos/index.html.erb
    In the thead section
      <th><%= model_class.human_attribute_name(:priority) %></th>
    In the tbody
      <td><%= todo.priority %></td>
11.6 Add priority to show
  views/todos/show.html.erb
    <dt><strong><%= model_class.human_attribute_name(:priority) %>:</strong></dt>
    <dd><%= @todo.priority %></dd>
11.7 Set default sort to priority high to low
  model/todo.rb
    default_scope order("priority DESC")
    

12.0 Adding status to todos
12.1 Generate DB migration
  $ rails g migration add_status_to_todos status:boolean
12.2 Set migration to defualt status to true
  db/migrate/#####_add_status_to_todos
    add_column :todos, :status, :boolean, default: true
12.3 Migrate DB
  $ bundle exec rake db:migrate
12.4 Make status accessible
  app/models/todo.rb
    attr_accessible :status
12.5 Add status to todo form
  app/views/todos/_form.html.erb
    <div class="control-group">
      <%= f.label :status, :class => 'control-label' %>
      <div class="controls">
        <%= radio_button("todo", "status", "true") %> Open<br>
        <%= radio_button("todo", "status", "false") %> Closed
      </div>
    </div>
12.6 Add status to todo show
  app/views/todos/show
    <dt><strong><%= model_class.human_attribute_name(:status) %>:</strong></dt>
    <% if @todo.status? %>
      <dd>Open</dd>
    <% else %>  
      <dd>Closed</dd>
    <% end %>
12.7 Filter todos index to only show open todos
  app/controllers/todos_controller.rb
    def index
      @todos = current_user.todos.find_all_by_status(true)
      ...
    end
12.8 A separate page for showing completed todos
  app/controllers/todos_controller.rb
    def completed
      @todos = Todo.find_all_by_status(false)
      render :index
    end
12.9 Routing for complete todos page
  config/routes.rb
    match '/completed' => 'todos#completed', :as => :completed
12.10 Links for open and completed page for signed in users
  app/layouts/application.html.erb (line 50)
    <% if user_signed_in? %>
      <li><%= link_to "Open", todos_path  %></li>
      <li><%= link_to "Completed", completed_path  %></li>
    <% end %>

13.0 Cleanup views/todos/index.html.erb
13.1 Order the table status, title, priority, created_at, actions
13.2 Status
  line 8 <th><%= model_class.human_attribute_name(:status) %></th>
  line 18 <td><%= todo.status? ? "Open" : "Closed" %></td>
13.3 Make title link to show view
  line 19 <td><%= link_to todo.title, todo_path(todo) %></td>
13.4 Created at (pretty dates with stamp gem)
  Gemfile
    gem "stamp"
  $ bundle install
  views/todos/index.html
    line 20 <td><%= todo.created_at.stamp("July 4, 1776") %></td>

14.0 Deploy completed app to heroku
14.1 add files to git
  $ git add .
14.2 commit changes to git
  $ git commit -am "Finished with rubyweekend app"
14.3 Push to heroku
  $ git push heroku master